@model List<MoneyWise.Models.HistoryModel>
@{
    ViewData["Title"] = "Transaction History";
}

@section Styles {
    <link rel="stylesheet" href="~/css/transaction-history.css" />
}

<!-- Page Heading -->
<div class="d-sm-flex align-items-center justify-content-between mb-4">
    <h1 class="h3 mb-0 text-gray-800">Transaction History</h1>
    <div>
        <button type="button" class="btn btn-primary btn-sm" onclick="refreshHistory()">
            <i class="fas fa-sync-alt"></i> Refresh
        </button>
        <button type="button" class="btn btn-info btn-sm" onclick="testDatabaseConnection()">
            <i class="fas fa-database"></i> Test DB Connection
        </button>
        <button type="button" class="btn btn-warning btn-sm" onclick="checkAvailableTables()">
            <i class="fas fa-list"></i> Check Tables
        </button>
        <button type="button" class="btn btn-success btn-sm" onclick="showCreateHistoryForm()">
            <i class="fas fa-plus"></i> Add History
        </button>
        <a href="@Url.Action("Index", "Home")" class="btn btn-secondary btn-sm">
            <i class="fas fa-arrow-left"></i> Back to Dashboard
        </a>
    </div>
</div>

<!-- Alert Messages -->
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="fas fa-exclamation-triangle"></i>
        @TempData["ErrorMessage"]
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <i class="fas fa-check-circle"></i>
        @TempData["SuccessMessage"]
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}

<!-- Transaction History Card -->
<div class="card shadow mb-4">
    <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
        <h6 class="m-0 font-weight-bold text-primary">
            <i class="fas fa-history"></i> Your Transaction History
        </h6>
        <div class="dropdown no-arrow">
            <a class="dropdown-toggle" href="#" role="button" id="dropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <i class="fas fa-ellipsis-v fa-sm fa-fw text-gray-400"></i>
            </a>
            <div class="dropdown-menu dropdown-menu-right shadow animated--fade-in" aria-labelledby="dropdownMenuLink">
                <div class="dropdown-header">Transaction Options:</div>
                <a class="dropdown-item" href="#" onclick="exportToCSV()">
                    <i class="fas fa-download fa-sm fa-fw mr-2 text-gray-400"></i>Export to CSV
                </a>
                <a class="dropdown-item" href="#" onclick="printHistory()">
                    <i class="fas fa-print fa-sm fa-fw mr-2 text-gray-400"></i>Print History
                </a>
            </div>
        </div>
    </div>
    <div class="card-body">
        @if (Model != null && Model.Any())
        {
            <div class="table-responsive">
                <table class="table table-bordered" id="historyTable" width="100%" cellspacing="0">
                    <thead>
                        <tr>
                            <th>History ID</th>
                            <th>Type</th>
                            <th>Amount</th>
                            <th>Date</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var history in Model.OrderByDescending(h => h.created_at))
                        {
                            <tr>
                                <td>@history.HistoryID</td>
                                <td>
                                    @if (history.Type == "deposit")
                                    {
                                        <span class="badge badge-success">Deposit</span>
                                    }
                                    else
                                    {
                                        <span class="badge badge-danger">Withdrawal</span>
                                    }
                                </td>
                                <td class="@(history.Type == "deposit" ? "text-success" : "text-danger")">
                                    <strong>₱@history.Amount.ToString("F2")</strong>
                                    @if (history.Type == "deposit")
                                    {
                                        <i class="fas fa-plus-circle text-success ml-1"></i>
                                    }
                                    else
                                    {
                                        <i class="fas fa-minus-circle text-danger ml-1"></i>
                                    }
                                </td>
                                <td>
                                    @if (history.created_at.HasValue)
                                    {
                                        <span title="@history.created_at.Value.ToString("yyyy-MM-dd HH:mm:ss")">
                                            @history.created_at.Value.ToString("MMM dd, yyyy")
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">N/A</span>
                                    }
                                </td>
                                <td>
                                    <button class="btn btn-info btn-sm" onclick="viewHistoryDetails(@history.HistoryID)" title="View Details">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="text-center py-5">
                <i class="fas fa-inbox fa-3x text-gray-300 mb-3"></i>
                <h5 class="text-gray-500">No transaction history found</h5>
                <p class="text-gray-400">You haven't made any transactions yet.</p>
                <a href="@Url.Action("Index", "Home")" class="btn btn-primary">
                    <i class="fas fa-plus"></i> Make Your First Transaction
                </a>
            </div>
        }
    </div>
</div>

<!-- Transaction Summary Cards -->
<div class="row">
    <div class="col-xl-3 col-md-6 mb-4">
        <div class="card border-left-primary shadow h-100 py-2">
            <div class="card-body">
                <div class="row no-gutters align-items-center">
                    <div class="col mr-2">
                        <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                            Total Transactions
                        </div>
                        <div class="h5 mb-0 font-weight-bold text-gray-800" id="totalTransactions">
                            @(Model?.Count ?? 0)
                        </div>
                    </div>
                    <div class="col-auto">
                        <i class="fas fa-calendar fa-2x text-gray-300"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-xl-3 col-md-6 mb-4">
        <div class="card border-left-success shadow h-100 py-2">
            <div class="card-body">
                <div class="row no-gutters align-items-center">
                    <div class="col mr-2">
                        <div class="text-xs font-weight-bold text-success text-uppercase mb-1">
                            Total Deposits
                        </div>
                        <div class="h5 mb-0 font-weight-bold text-gray-800" id="totalDeposits">
                            ₱@(Model?.Where(h => h.Type == "deposit").Sum(h => h.Amount).ToString("F2") ?? "0.00")
                        </div>
                    </div>
                    <div class="col-auto">
                        <i class="fas fa-plus-circle fa-2x text-gray-300"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-xl-3 col-md-6 mb-4">
        <div class="card border-left-danger shadow h-100 py-2">
            <div class="card-body">
                <div class="row no-gutters align-items-center">
                    <div class="col mr-2">
                        <div class="text-xs font-weight-bold text-danger text-uppercase mb-1">
                            Total Withdrawals
                        </div>
                        <div class="h5 mb-0 font-weight-bold text-gray-800" id="totalWithdrawals">
                            ₱@(Model?.Where(h => h.Type == "withdrawal").Sum(h => h.Amount).ToString("F2") ?? "0.00")
                        </div>
                    </div>
                    <div class="col-auto">
                        <i class="fas fa-minus-circle fa-2x text-gray-300"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-xl-3 col-md-6 mb-4">
        <div class="card border-left-info shadow h-100 py-2">
            <div class="card-body">
                <div class="row no-gutters align-items-center">
                    <div class="col mr-2">
                        <div class="text-xs font-weight-bold text-info text-uppercase mb-1">
                            Net Balance
                        </div>
                        <div class="h5 mb-0 font-weight-bold text-gray-800" id="netBalance">
                            ₱@((Model?.Where(h => h.Type == "deposit").Sum(h => h.Amount) ?? 0) - (Model?.Where(h => h.Type == "withdrawal").Sum(h => h.Amount) ?? 0)).ToString("F2")
                        </div>
                    </div>
                    <div class="col-auto">
                        <i class="fas fa-balance-scale fa-2x text-gray-300"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- History Details Modal -->
<div class="modal fade" id="historyModal" tabindex="-1" role="dialog" aria-labelledby="historyModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="historyModalLabel">Transaction Details</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="historyModalBody">
                <!-- History details will be loaded here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function refreshHistory() {
            location.reload();
        }

        function viewHistoryDetails(historyId) {
            // For now, just show a simple message
            $('#historyModalBody').html('<p>Transaction history details for ID: ' + historyId + '</p>');
            $('#historyModal').modal('show');
        }

        function exportToCSV() {
            // Implementation for CSV export
            alert('CSV export functionality will be implemented here');
        }

        function printHistory() {
            // Implementation for printing
            window.print();
        }

        function testDatabaseConnection() {
            // Show loading state
            const button = event.target;
            const originalText = button.innerHTML;
            button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Testing...';
            button.disabled = true;

            fetch('/History/TestDatabaseConnection')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('Database connection test successful!\n\n' + 
                              'Connection: ✓ Connected\n' +
                              'Histories table: ✓ Exists\n' +
                              'Timestamp: ' + new Date(data.data.timestamp).toLocaleString());
                    } else {
                        alert('Database connection test failed!\n\n' + 
                              'Error: ' + data.message + '\n\n' +
                              'Please check your Supabase configuration and table structure.');
                    }
                })
                .catch(error => {
                    console.error('Error testing database connection:', error);
                    alert('Error testing database connection. Please check the console for details.');
                })
                .finally(() => {
                    // Restore button state
                    button.innerHTML = originalText;
                    button.disabled = false;
                });
        }

        function checkAvailableTables() {
            // Show loading state
            const button = event.target;
            const originalText = button.innerHTML;
            button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Checking...';
            button.disabled = true;

            fetch('/History/GetAvailableTables')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const tables = data.data.tables;
                        const count = data.data.count;
                        alert(`Available Tables (${count}):\n\n${tables.join('\n')}`);
                    } else {
                        alert('Error checking available tables:\n' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error checking available tables:', error);
                    alert('Error checking available tables. Please check the console for details.');
                })
                .finally(() => {
                    // Restore button state
                    button.innerHTML = originalText;
                    button.disabled = false;
                });
        }

        function showCreateHistoryForm() {
            $('#historyModalBody').html(`
                <form id="createHistoryForm">
                    <div class="form-group">
                        <label for="historyType">Transaction Type:</label>
                        <select class="form-control" id="historyType" required>
                            <option value="deposit">Deposit</option>
                            <option value="withdrawal">Withdrawal</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="historyAmount">Amount:</label>
                        <input type="number" class="form-control" id="historyAmount" step="0.01" min="0.01" required>
                    </div>
                    <div class="form-group">
                        <label for="historyDescription">Description (Optional):</label>
                        <input type="text" class="form-control" id="historyDescription" placeholder="Enter description...">
                    </div>
                    <div class="form-group">
                        <label for="historyDate">Date:</label>
                        <input type="datetime-local" class="form-control" id="historyDate" required>
                    </div>
                    <button type="submit" class="btn btn-primary">Create History</button>
                </form>
            `);
            $('#historyModalLabel').text('Create New Transaction History');
            $('#historyModal').modal('show');
            
            // Set default date to current date and time
            const now = new Date();
            const year = now.getFullYear();
            const month = String(now.getMonth() + 1).padStart(2, '0');
            const day = String(now.getDate()).padStart(2, '0');
            const hours = String(now.getHours()).padStart(2, '0');
            const minutes = String(now.getMinutes()).padStart(2, '0');
            document.getElementById('historyDate').value = `${year}-${month}-${day}T${hours}:${minutes}`;
        }

        // Handle form submission with event delegation
        $(document).on('submit', '#createHistoryForm', function(e) {
            e.preventDefault();
            
            const historyType = $('#historyType').val();
            const historyAmount = $('#historyAmount').val();
            const historyDescription = $('#historyDescription').val();
            const historyDate = $('#historyDate').val();

            if (!historyAmount || !historyDate) {
                alert('Amount and Date are required.');
                return;
            }

            const data = {
                Action: historyType,
                Amount: parseFloat(historyAmount),
                Description: historyDescription
            };

            fetch('/History/CreateTransactionHistory', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Transaction history created successfully!');
                    $('#historyModal').modal('hide');
                    location.reload(); // Refresh the page to show the new history
                } else {
                    alert('Error creating transaction history: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error creating transaction history:', error);
                alert('Error creating transaction history. Please check the console for details.');
            });
        });
    </script>
}
