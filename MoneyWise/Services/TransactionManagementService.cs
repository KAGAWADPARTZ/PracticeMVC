using System.Text;
using System.Text.Json;
using MoneyWise.Models;

namespace MoneyWise.Services
{
    public class TransactionManagementService
    {
        private readonly SupabaseService _supabaseService;
        private readonly UserRepository _userRepository;

        public TransactionManagementService(SupabaseService supabaseService, UserRepository userRepository)
        {
            _supabaseService = supabaseService;
            _userRepository = userRepository;
        }

        /// <summary>
        /// Processes a transaction by updating the Savings table and inserting into Histories table
        /// </summary>
        /// <param name="userEmail">User's email address</param>
        /// <param name="amount">Transaction amount</param>
        /// <param name="action">Transaction type: "deposit", "withdraw", "add", "withdrawal"</param>
        /// <param name="description">Optional description for the transaction</param>
        /// <returns>Success status and message</returns>
        public async Task<(bool success, string message)> ProcessTransactionAsync(string userEmail, decimal amount, string action, string description = "")
        {
            try
            {
                if (string.IsNullOrEmpty(userEmail))
                {
                    return (false, "User not authenticated");
                }

                // Get user from database
                var users = await _userRepository.GetAllUsers();
                var user = users.FirstOrDefault(u => u.Email == userEmail);
                
                if (user == null)
                {
                    return (false, "User not found");
                }

                // Get current savings balance
                var currentSavings = await _supabaseService.GetSavingsByUserIdAsync(user.UserID);
                if (currentSavings == null)
                {
                    // Create new savings record if none exists
                    currentSavings = new Savings
                    {
                        SavingsID = 0,
                        UserID = user.UserID,
                        Amount = 0,
                        created_at = DateTime.UtcNow
                    };
                    await _supabaseService.CreateSavingsAsync(currentSavings);
                }

                // Normalize action type
                var normalizedAction = NormalizeActionType(action);
                if (string.IsNullOrEmpty(normalizedAction))
                {
                    return (false, "Invalid transaction type. Use 'deposit', 'withdraw', 'add', or 'withdrawal'");
                }

                // Calculate new balance based on transaction type
                decimal newBalance;
                string actionText;
                
                if (normalizedAction == "deposit")
                {
                    newBalance = currentSavings.Amount + amount;
                    actionText = "deposited";
                }
                else // withdrawal
                {
                    // Check if withdrawal would result in negative balance
                    if (currentSavings.Amount < amount)
                    {
                        return (false, "Insufficient funds for withdrawal");
                    }
                    newBalance = currentSavings.Amount - amount;
                    actionText = "withdrawn";
                }

                // Update the Savings table with new balance
                var updatedSavings = new Savings
                {
                    SavingsID = currentSavings.SavingsID,
                    UserID = user.UserID,
                    Amount = newBalance,
                    created_at = currentSavings.created_at,
                    updated_at = DateTime.UtcNow
                };

                var savingsUpdateSuccess = await _supabaseService.UpdateSavingsAsync(currentSavings.SavingsID, updatedSavings);
                
                if (!savingsUpdateSuccess)
                {
                    return (false, "Failed to update savings balance");
                }

                // Create history record
                var history = new HistoryModel
                {
                    HistoryID = 0, // Auto-generated by database
                    UserID = user.UserID,
                    Type = action.ToLower() == "add" ? "deposit" : 
                           action.ToLower() == "withdraw" ? "withdrawal" : action,
                    Amount = (float)amount,
                    created_at = DateTime.UtcNow
                };

                var historySuccess = await _supabaseService.CreateHistoryAsync(history);
                
                if (historySuccess)
                {
                    var message = $"₱{Math.Abs(amount):F2} successfully {actionText}. New balance: ₱{newBalance:F2}";
                    if (!string.IsNullOrEmpty(description))
                    {
                        message += $" - {description}";
                    }
                    return (true, message);
                }
                else
                {
                    // Transaction was updated but history failed - still return success for the transaction
                    return (true, $"₱{Math.Abs(amount):F2} successfully {actionText}. New balance: ₱{newBalance:F2} (History recording failed)");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Exception in ProcessTransactionAsync: {ex.Message}");
                return (false, "An error occurred while processing the transaction");
            }
        }

        /// <summary>
        /// Processes a transaction using TransactionRequest model
        /// </summary>
        public async Task<(bool success, string message)> ProcessTransactionAsync(string userEmail, TransactionRequest request)
        {
            return await ProcessTransactionAsync(userEmail, (decimal)request.Amount, request.Action, request.Description);
        }

        /// <summary>
        /// Processes a transaction using SavingsRequest model
        /// </summary>
        public async Task<(bool success, string message)> ProcessTransactionAsync(string userEmail, SavingsRequest request)
        {
            return await ProcessTransactionAsync(userEmail, request.SavingsAmount, request.Action);
        }

        /// <summary>
        /// Gets the current savings balance for a user
        /// </summary>
        public async Task<Savings?> GetUserSavingsAsync(string userEmail)
        {
            try
            {
                var users = await _userRepository.GetAllUsers();
                var user = users.FirstOrDefault(u => u.Email == userEmail);
                
                if (user == null)
                {
                    return null;
                }

                var currentSavings = await _supabaseService.GetSavingsByUserIdAsync(user.UserID);
                
                if (currentSavings == null)
                {
                    // Create new savings record if none exists
                    var newSavings = new Savings
                    {
                        SavingsID = 0,
                        UserID = user.UserID,
                        Amount = 0,
                        created_at = DateTime.UtcNow
                    };
                    
                    await _supabaseService.CreateSavingsAsync(newSavings);
                    return newSavings;
                }

                return currentSavings;
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets transaction history for a user
        /// </summary>
        public async Task<List<HistoryModel>> GetUserTransactionHistoryAsync(string userEmail)
        {
            try
            {
                var users = await _userRepository.GetAllUsers();
                var user = users.FirstOrDefault(u => u.Email == userEmail);
                
                if (user == null)
                {
                    return new List<HistoryModel>();
                }

                return await _supabaseService.GetHistoriesByUserIdAsync(user.UserID);
            }
            catch (Exception)
            {
                return new List<HistoryModel>();
            }
        }

        /// <summary>
        /// Normalizes action types to standard format
        /// </summary>
        private string NormalizeActionType(string action)
        {
            if (string.IsNullOrEmpty(action))
                return string.Empty;

            var normalized = action.ToLower().Trim();
            
            return normalized switch
            {
                "add" or "deposit" => "deposit",
                "withdraw" or "withdrawal" => "withdrawal",
                _ => string.Empty
            };
        }
    }
}
