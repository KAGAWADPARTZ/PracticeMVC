using MoneyWise.Models;

namespace MoneyWise.Services
{
    public class HistoryService
    {
        private readonly SupabaseService _supabaseService;
        private readonly UserRepository _userRepository;

        public HistoryService(SupabaseService supabaseService, UserRepository userRepository)
        {
            _supabaseService = supabaseService;
            _userRepository = userRepository;
        }

        public async Task<List<HistoryModel>> GetUserHistoryAsync(string userEmail)
        {
            try
            {
                var users = await _userRepository.GetAllUsers();
                var user = users.FirstOrDefault(u => u.Email == userEmail);
                
                if (user == null)
                {
                    return new List<HistoryModel>();
                }

                return await _supabaseService.GetHistoriesByUserIdAsync(user.UserID);
            }
            catch (Exception)
            {
                return new List<HistoryModel>();
            }
        }

        public async Task<List<HistoryModel>> GetRecentHistoryAsync(string userEmail, int count = 10)
        {
            try
            {
                var histories = await GetUserHistoryAsync(userEmail);
                return histories.Take(count).ToList();
            }
            catch (Exception)
            {
                return new List<HistoryModel>();
            }
        }

        public async Task<List<HistoryModel>> GetHistoryByDateRangeAsync(string userEmail, DateTime startDate, DateTime endDate)
        {
            try
            {
                var histories = await GetUserHistoryAsync(userEmail);
                return histories.Where(h => h.created_at >= startDate && h.created_at <= endDate).ToList();
            }
            catch (Exception)
            {
                return new List<HistoryModel>();
            }
        }

        public async Task<object> GetHistorySummaryAsync(string userEmail)
        {
            try
            {
                var histories = await GetUserHistoryAsync(userEmail);
                
                var deposits = histories.Where(h => h.Type == "deposit").ToList();
                var withdrawals = histories.Where(h => h.Type == "withdrawal").ToList();

                var totalDeposits = deposits.Sum(h => h.Amount.Sum());
                var totalWithdrawals = withdrawals.Sum(h => h.Amount.Sum());

                return new
                {
                    TotalTransactions = histories.Count,
                    TotalDeposits = totalDeposits,
                    TotalWithdrawals = totalWithdrawals,
                    NetBalance = totalDeposits - totalWithdrawals,
                    AverageDeposit = deposits.Any() ? deposits.Average(h => h.Amount.Average()) : 0,
                    AverageWithdrawal = withdrawals.Any() ? withdrawals.Average(h => h.Amount.Average()) : 0
                };
            }
            catch (Exception)
            {
                return new
                {
                    TotalTransactions = 0,
                    TotalDeposits = 0,
                    TotalWithdrawals = 0,
                    NetBalance = 0,
                    AverageDeposit = 0,
                    AverageWithdrawal = 0
                };
            }
        }

        public async Task<bool> CreateHistoryAsync(string userEmail, HistoryRequest request)
        {
            try
            {
                var users = await _userRepository.GetAllUsers();
                var user = users.FirstOrDefault(u => u.Email == userEmail);
                
                if (user == null)
                {
                    return false;
                }

                var history = new HistoryModel
                {
                    HistoryID = 0, // Auto-generated by database
                    UserID = user.UserID,
                    Type = request.Type,
                    Amount = new float[] { request.Amount }, // Store amount as array
                    created_at = DateTime.UtcNow
                };

                return await _supabaseService.CreateHistoryAsync(history);
            }
            catch (Exception)
            {
                return false;
            }
        }
    }
}
