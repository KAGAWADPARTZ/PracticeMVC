using MoneyWise.Models;

namespace MoneyWise.Services
{
    public class HistoryService
    {
        private readonly SupabaseService _supabaseService;
        private readonly UserRepository _userRepository;

        public HistoryService(SupabaseService supabaseService, UserRepository userRepository)
        {
            _supabaseService = supabaseService;
            _userRepository = userRepository;
        }

        public async Task<List<HistoryModel>> GetUserHistoryAsync(string userEmail)
        {
            try
            {
                var users = await _userRepository.GetAllUsers();
                var user = users.FirstOrDefault(u => u.Email == userEmail);
                
                if (user == null)
                {
                    return new List<HistoryModel>();
                }

                return await _supabaseService.GetHistoriesByUserIdAsync(user.UserID);
            }
            catch (Exception)
            {
                return new List<HistoryModel>();
            }
        }

        public async Task<List<HistoryModel>> GetRecentHistoryAsync(string userEmail, int count = 10)
        {
            try
            {
                var histories = await GetUserHistoryAsync(userEmail);
                return histories.Take(count).ToList();
            }
            catch (Exception)
            {
                return new List<HistoryModel>();
            }
        }

        public async Task<List<HistoryModel>> GetHistoryByDateRangeAsync(string userEmail, DateTime startDate, DateTime endDate)
        {
            try
            {
                var histories = await GetUserHistoryAsync(userEmail);
                return histories.Where(h => h.created_at >= startDate && h.created_at <= endDate).ToList();
            }
            catch (Exception)
            {
                return new List<HistoryModel>();
            }
        }

        public async Task<object> GetHistorySummaryAsync(string userEmail)
        {
            try
            {
                var histories = await GetUserHistoryAsync(userEmail);
                
                var deposits = histories.Where(h => h.Type == "deposit").ToList();
                var withdrawals = histories.Where(h => h.Type == "withdrawal").ToList();

                var totalDeposits = deposits.Sum(h => h.Amount);
                var totalWithdrawals = withdrawals.Sum(h => h.Amount);

                return new
                {
                    TotalTransactions = histories.Count,
                    TotalDeposits = totalDeposits,
                    TotalWithdrawals = totalWithdrawals,
                    NetBalance = totalDeposits - totalWithdrawals,
                    AverageDeposit = deposits.Any() ? deposits.Average(h => h.Amount) : 0,
                    AverageWithdrawal = withdrawals.Any() ? withdrawals.Average(h => h.Amount) : 0
                };
            }
            catch (Exception)
            {
                return new
                {
                    TotalTransactions = 0,
                    TotalDeposits = 0,
                    TotalWithdrawals = 0,
                    NetBalance = 0,
                    AverageDeposit = 0,
                    AverageWithdrawal = 0
                };
            }
        }

        public async Task<bool> CreateHistoryAsync(string userEmail, HistoryRequest request)
        {
            try
            {
                var users = await _userRepository.GetAllUsers();
                var user = users.FirstOrDefault(u => u.Email == userEmail);
                
                if (user == null)
                {
                    return false;
                }

                var history = new HistoryModel
                {
                    HistoryID = 0, // Auto-generated by database
                    UserID = user.UserID,
                    Type = request.Type,
                    Amount = request.Amount, // Store amount directly as single value
                    created_at = DateTime.UtcNow
                };

                return await _supabaseService.CreateHistoryAsync(history);
            }
            catch (Exception)
            {
                return false;
            }
        }

        /// <summary>
        /// Creates a transaction history record for deposits, withdrawals, or other transactions
        /// </summary>
        /// <param name="userEmail">User's email address</param>
        /// <param name="transactionType">Type of transaction (deposit, withdrawal, etc.)</param>
        /// <param name="amount">Transaction amount</param>
        /// <param name="description">Optional description for the transaction</param>
        /// <returns>Success status and message</returns>
        public async Task<(bool success, string message)> CreateTransactionHistoryAsync(string userEmail, string transactionType, decimal amount, string description = "")
        {
            try
            {
                Console.WriteLine($"Creating transaction history for user: {userEmail}, Type: {transactionType}, Amount: {amount}");

                var users = await _userRepository.GetAllUsers();
                var user = users.FirstOrDefault(u => u.Email == userEmail);
                
                if (user == null)
                {
                    Console.WriteLine($"User not found for email: {userEmail}");
                    return (false, "User not found");
                }

                // Normalize transaction type
                var normalizedType = NormalizeTransactionType(transactionType);
                if (string.IsNullOrEmpty(normalizedType))
                {
                    Console.WriteLine($"Invalid transaction type: {transactionType}");
                    return (false, "Invalid transaction type");
                }

                var history = new HistoryModel
                {
                    HistoryID = 0, // Auto-generated by database
                    UserID = user.UserID,
                    Type = normalizedType,
                    Amount = (float)amount,
                    created_at = DateTime.UtcNow
                };

                Console.WriteLine($"Attempting to create history record: {System.Text.Json.JsonSerializer.Serialize(history)}");

                var success = await _supabaseService.CreateHistoryAsync(history);
                
                if (success)
                {
                    Console.WriteLine($"Successfully created history record for user {userEmail}");
                    return (true, "Transaction history recorded successfully");
                }
                else
                {
                    Console.WriteLine($"Failed to create history record for user {userEmail}");
                    return (false, "Failed to record transaction history");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Exception in CreateTransactionHistoryAsync: {ex.Message}");
                Console.WriteLine($"Stack trace: {ex.StackTrace}");
                return (false, $"Error creating transaction history: {ex.Message}");
            }
        }

        /// <summary>
        /// Creates a transaction history record using TransactionRequest model
        /// </summary>
        public async Task<(bool success, string message)> CreateTransactionHistoryAsync(string userEmail, TransactionRequest request)
        {
            return await CreateTransactionHistoryAsync(userEmail, request.Action, (decimal)request.Amount, request.Description);
        }

        /// <summary>
        /// Normalizes transaction types to standard format
        /// </summary>
        private string NormalizeTransactionType(string transactionType)
        {
            if (string.IsNullOrEmpty(transactionType))
                return string.Empty;

            var normalized = transactionType.ToLower().Trim();
            
            return normalized switch
            {
                "add" or "deposit" => "deposit",
                "withdraw" or "withdrawal" => "withdrawal",
                "transfer" => "transfer",
                "payment" => "payment",
                "refund" => "refund",
                _ => normalized // Keep other types as-is
            };
        }

        /// <summary>
        /// Gets transaction history with pagination
        /// </summary>
        public async Task<(List<HistoryModel> histories, int totalCount)> GetUserHistoryPaginatedAsync(string userEmail, int page = 1, int pageSize = 20)
        {
            try
            {
                var allHistories = await GetUserHistoryAsync(userEmail);
                var totalCount = allHistories.Count;
                
                var paginatedHistories = allHistories
                    .OrderByDescending(h => h.created_at)
                    .Skip((page - 1) * pageSize)
                    .Take(pageSize)
                    .ToList();

                return (paginatedHistories, totalCount);
            }
            catch (Exception)
            {
                return (new List<HistoryModel>(), 0);
            }
        }

        /// <summary>
        /// Gets transaction history filtered by type
        /// </summary>
        public async Task<List<HistoryModel>> GetUserHistoryByTypeAsync(string userEmail, string transactionType)
        {
            try
            {
                var histories = await GetUserHistoryAsync(userEmail);
                var normalizedType = NormalizeTransactionType(transactionType);
                
                return histories.Where(h => h.Type.Equals(normalizedType, StringComparison.OrdinalIgnoreCase)).ToList();
            }
            catch (Exception)
            {
                return new List<HistoryModel>();
            }
        }
    }
}
